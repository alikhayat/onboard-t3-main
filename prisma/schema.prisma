generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Webhook {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  url        String   @unique
  secretHash String   @unique
  tenantId   String   @unique
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
}

model Onboarding {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  customerId   String
  customer     Customer         @relation(fields: [customerId], references: [id])
  workflow     Workflow         @relation(fields: [workflowId], references: [id])
  workflowId   String
  status       OnboardingStatus @default(Draft)
  tasks        OnboardingTask[]
  PersonalInfo PersonalInfo[]

  @@index([customerId])
  @@index([workflowId])
}

model PersonalInfo {
  id           String     @id @default(cuid())
  firstName    String
  lastName     String
  startDate    String
  onboarding   Onboarding @relation(fields: [onboardingId], references: [id])
  onboardingId String

  @@index([onboardingId])
}

enum OnboardingTaskStatus {
  Draft
  InProgress
  Completed
}

model OnboardingTask {
  id             String               @id @default(cuid())
  name           String
  stepName       String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  onboardingId   String
  onboarding     Onboarding           @relation(fields: [onboardingId], references: [id], onDelete: Cascade)
  workflowStepId String
  workflowStep   WorkflowStep         @relation(fields: [workflowStepId], references: [id])
  workflowItemId String
  workflowItem   WorkflowItem         @relation(fields: [workflowItemId], references: [id])
  status         OnboardingTaskStatus @default(Draft)
  completedAt    DateTime?

  @@index([onboardingId])
  @@index([workflowStepId])
  @@index([workflowItemId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  @db.Text
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.Text
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text
  tenantId      String?
  department    String?
  jobTitle      String?
  accounts      Account[]
  sessions      Session[]
  tenant        Tenant?   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Software {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId String
  cutomer    Customer @relation(fields: [customerId], references: [id])

  @@index([customerId])
}

model Address {
  id                String @id @default(cuid())
  street            String
  city              String
  state             String
  postalCode        String
  countryLetterCode String
  mspId             String @unique
  msp               Msp    @relation(fields: [mspId], references: [id])
}

model Msp {
  id        String     @id @default(cuid())
  name      String
  tenantId  String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  address   Address?
  tenant    Tenant?    @relation(fields: [tenantId], references: [id])
  customers Customer[]

  @@index([tenantId])
}

model Domain {
  id        String   @id @default(cuid())
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fqdn      String
  isDefault Boolean  @default(false)
  isInitial Boolean  @default(false)
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workflow {
  id           String         @id @default(cuid())
  name         String
  description  String
  customerId   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  workflowType WorkflowType
  customer     Customer?      @relation(fields: [customerId], references: [id])
  steps        WorkflowStep[]
  Onboarding   Onboarding[]

  @@index([customerId])
}

model WorkflowStep {
  id               String           @id @default(cuid())
  name             String
  description      String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  workflowId       String
  workflowStepType WorkflowStepType @default(CUSTOM)
  workflow         Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  items            WorkflowItem[]
  OnboardingTask   OnboardingTask[]

  @@index([workflowId])
}

model WorkflowItem {
  id             String           @id @default(cuid())
  name           String
  description    String
  required       Boolean?         @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  workflowStepId String
  WorkflowStep   WorkflowStep     @relation(fields: [workflowStepId], references: [id], onDelete: Cascade)
  OnboardingTask OnboardingTask[]

  @@index([workflowStepId])
}

model Tenant {
  id                      String      @id @default(cuid())
  name                    String
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  azureTenantId           String?     @unique
  googleWorkspaceTenantId String?     @unique
  accountType             AccountType
  hasGivenConsent         Boolean     @default(false)
  WebHook                 Webhook?
  users                   User[]
  msp                     Msp?
  domains                 Domain[]
  Customer                Customer?
}

model Customer {
  id             String           @id @default(cuid())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  tenantId       String           @unique
  managingMspId  String
  first_name     String?
  last_name      String?
  email          String?
  phone          String?
  isActivated    Boolean          @default(false)
  workflows      Workflow[]
  tenant         Tenant           @relation(fields: [tenantId], references: [id])
  managingMsp    Msp              @relation(fields: [managingMspId], references: [id])
  DeviceTemplate DeviceTemplate[]
  Onboarding     Onboarding[]
  Software       Software[]

  @@index([managingMspId])
  @@index([tenantId])
}

model DeviceComponent {
  id               String         @id @default(cuid())
  label            String
  value            String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deviceTemplateId String
  deviceTemplate   DeviceTemplate @relation(fields: [deviceTemplateId], references: [id], onDelete: Cascade)

  @@index([deviceTemplateId])
}

model DeviceTemplate {
  id               String            @id @default(cuid())
  name             String
  deviceType       String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  customerId       String
  deviceComponents DeviceComponent[]
  customer         Customer          @relation(fields: [customerId], references: [id])

  @@index([customerId])
}

enum WorkflowType {
  ONBOARDING
  ONBOARDING_OPTIONS
  OFFBOARDING
}

enum WorkflowStepType {
  INFO_GATHERING
  ACCOUNT_SETUP
  HARDWARE
  SOFTWARE
  SAAS
  COMMUNICATION
  CUSTOM
}

enum AccountType {
  MSP
  ENDCUSTOMER
}

enum OnboardingStatus {
  Draft
  Sent
  InProgress
  Completed
}
